---
import { EntryItem, EntriesNotFound } from "@components";
import { useTranslations, getEntries } from "@utils";
import { C } from "@configuration";
import type { Category, Lang } from "@models/type";
import { Icon } from "@ui-kit";

const { category, lang } = Astro.params;

const entries = await getEntries({ category: category!, locale: lang });

const t = useTranslations(lang as Lang);
const title = t(C.CATEGORIES_LABELS[category as Category]);

---

<aside
  class="overflow-y-auto select-none flex flex-col shrink-0 md:w-60 md:bg-gray-50 flex-1 md:flex-none md:max-h-dvh md:border-r md:border-slate-200 md:h-dvh"
>
  <div class="hidden md:block p-3 border-b border-slate-200 pb-2">
    <strong class="text-sm font-bold">{title}</strong>
  </div>

  <div class="hidden md:flex px-2 border-b border-slate-200 gap-2 items-center">
    <Icon name="search" size={16} class="text-gray-400"/>
    <input
      id="entry-search-input"
      type="text"
      placeholder={t({
        en: "Search",
        tr: "Ara",
      })}
      class="w-full p-2 border-none text-xs bg-transparent placeholder:text-gray-400 focus:outline-none focus:ring-0"
    />
  </div>

  <div
    id="entry-list-container"
    class="flex flex-col overflow-y-auto gap-1 md:py-3"
  >
    {
      entries.map((entry) => (
        <EntryItem
          name={entry.data.title}
          date={entry.data.date}
          href={entry.href}
        />
      ))
    }
  </div>

  <div
    id="no-search-results"
    class="p-3 text-center text-sm text-gray-500"
    class:list={[
      {
        "hidden": entries.length > 0
      }
    ]}
  >
    {t({
      en: "No search results",
      tr: "Sonuç bulunamadı",
    })}
  </div>
</aside>

<script is:inline>
  const searchInput = document.getElementById("entry-search-input");
  const listContainer = document.getElementById("entry-list-container");
  const noSearchResultsMessage = document.getElementById("no-search-results");
  const initialEntriesExist =
    listContainer && listContainer.children.length > 0;

  if (
    initialEntriesExist &&
    searchInput &&
    listContainer &&
    noSearchResultsMessage
  ) {
    const entryItems = listContainer.querySelectorAll("[data-entry-item]");

    searchInput.addEventListener("input", (event) => {
      const searchTerm = event.target.value.toLowerCase().trim();
      let visibleCount = 0;

      entryItems.forEach((item) => {
        const title = item.dataset.name.toLowerCase();
        const isVisible = searchTerm === "" || title.includes(searchTerm);

        item.style.display = isVisible ? "" : "none";
        if (isVisible) {
          visibleCount++;
        }
      });

      noSearchResultsMessage.style.display =
        searchTerm !== "" && visibleCount === 0 ? "block" : "none";
    });
  }
</script>
