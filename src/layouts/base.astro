---
import { Sidebar, Topbar } from "@components";
import type { Lang } from "@models/type";
import { useTranslations } from "@utils";
import "@styles/global.css";
import { AstroFont } from "astro-font";
import Analytics from "@vercel/analytics/astro";
import SpeedInsights from "@vercel/speed-insights/astro";

interface Props {
  id?: string;
  title?: string;
  description?: string;
  date?: Date;
}

const { id, title = "", description, date } = Astro.props;
const t = useTranslations(Astro.currentLocale as Lang);
const url = Astro.url.href;
const locale = Astro.currentLocale as Lang;
const siteTitle = t({
  en: "Enes Başpınar",
  tr: "Enes Başpınar",
});
const localeTitle = title ? `${title} - ${siteTitle}` : siteTitle;
const localeDescription = description || t("description");
---

<html lang={locale}>
  <head>
    <meta charset="utf-8" />
    <meta name="description" content={localeDescription} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{localeTitle}</title>

    <!-- Open Graph -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta
      property="og:image"
      content={new URL(Astro.url.pathname + "og.png", Astro.site)}
    />
    <meta property="og:type" content="article" />
    <meta property="og:url" content={url} />

    <!-- Twitter card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta
      name="twitter:image"
      content={new URL(Astro.url.pathname + "og.png", Astro.site)}
    />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />

    <AstroFont
      config={[
        {
          src: [],
          name: "JetBrains Mono",
          googleFontsURL:
            "https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600&display=swap",
          preload: true,
          display: "swap",
          selector: "body",
          fallback: "monospace",
        },
        {
          src: [],
          name: "Geist",
          googleFontsURL:
            "https://fonts.googleapis.com/css2?family=Geist:wght@100..900&display=swap",
          preload: true,
          display: "swap",
          selector: "body",
          fallback: "sans-serif",
        },
      ]}
    />
  </head>
  <body
    class="flex flex-col md:flex-row items-stretch min-h-dvh overflow-hidden"
  >
    <div class="flex md:hidden">
      <Topbar {id} {title} {date} />
    </div>
    <div class="hidden md:flex">
      <Sidebar />
    </div>
    <slot />
    <Analytics />
    <SpeedInsights />

    <script define:vars={{ locale }}>
      async function fetchViewCounts() {
        try {
          const response = await fetch("/api/get-view-counts", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ locale }),
          });

          if (!response.ok) throw new Error("View count fetch failed");

          const data = await response.json();

          if (data.success && data.viewCounts) {
            const viewCountElements = document.querySelectorAll(
              `[data-entry-view-count]`
            );

            viewCountElements.forEach((element) => {
              element.textContent = `${data.viewCounts[element.getAttribute("data-entry-view-count")] ?? 0}`;
            });
          }
        } catch (error) {
          console.error("[ERROR] Failed to fetch view counts:", error);
        }
      }

      document.addEventListener("DOMContentLoaded", fetchViewCounts);
    </script>
  </body>
</html>
