---
import { Link, Icon } from "@ui-kit";
import { Fragment } from "astro/jsx-runtime";

type Props = {
  id?: string;
  title?: string;
  description?: string;
  columns:
    | string[]
    | { name: string; title: string; class?: string; bold?: boolean }[];
  data: any[][] | { value: any; link?: string }[][];
  headless?: boolean;
  noScroll?: boolean;
};

const {
  id,
  title,
  description,
  columns,
  data,
  headless = false,
  noScroll = false,
} = Astro.props as Props;
---

<div
  class="relative border-gray-200 rounded-lg overflow-hidden inline-block border md:mb-6"
>
  {
    title && (
      <div class="px-4 pt-3 md:p-5 text-lg font-semibold text-left rtl:text-right bg-white">
        {title}
        {description && (
          <p class="mt-1 text-sm font-normal text-gray-500">{description}</p>
        )}
      </div>
    )
  }
  <div
    class:list={[
      "leading-0 w-full [scrollbar-width:none] md:[scrollbar-width:auto]",
      {
        "-mx-4 px-4 md:mx-0 md:px-0 overflow-x-auto": !noScroll,
      },
    ]}
  >
    <table
      class:list={[
        "text-sm text-left rtl:text-right md:w-full",
        {
          "w-full": noScroll,
          "w-max": !noScroll,
        },
      ]}
    >
      {
        !headless && (
          <thead class="text-xs bg-gray-50 ">
            <tr>
              {columns.map((col) => (
                <th
                  scope="col"
                  class:list={[
                    "px-4 py-3",
                    typeof col === "object" && col.class,
                  ]}
                >
                  {typeof col === "string" ? col : col.title}
                </th>
              ))}
            </tr>
          </thead>
        )
      }
      <tbody>
        {
          data.map((row) => (
            <tr class="bg-white border-b last:border-none border-gray-200">
              {columns.map((col, colNo) => {
                const data = row[colNo];
                const colName = typeof col === "string" ? col : col.name;
                let value: any;
                let link: string | undefined;
                let html: boolean | undefined;
                if (typeof data === "object") {
                  value = data.value;
                  link = data.link;
                  html = data.html;
                } else {
                  value = data;
                }

                return (
                  <td
                    class:list={[
                      "px-4 py-4",
                      {
                        "!pl-4 !pr-0 place-items-center": colName === "icon",
                      },
                      typeof col === "object" && col.class,
                    ]}
                  >
                    {html ? (
                      <div set:html={value} />
                    ) : (
                      (() => {
                        if (colName === "icon") {
                          if (value)
                            return <Icon name={value} size={20} colored />;
                          if (id) return <Icon name={id} size={20} colored />;
                        }
                        if (colName === "age") return `${value} years old`;
                        if (link) return <Link href={link}>{value}</Link>;
                        return col.bold === true ? <b>{value}</b> : value;
                      })()
                    )}
                  </td>
                );
              })}
            </tr>
          ))
        }
      </tbody>
    </table>
  </div>
</div>
