---
import { components } from "@components/markdown";
import { EntryLayout } from "@layouts";
import { render } from "astro:content";
import { useTranslations } from "@utils";
import { getEntries, formatDate } from "@utils";
import type { Lang } from "@models/type";
import { Icon, Image } from "@ui-kit";
import { C } from "@configuration";

export async function getStaticPaths() {
  const entries = await Promise.all(
    C.ENTRY_CATEGORIES.map((category) => getEntries({ category }))
  );

  const paths = entries.flat().map((post) => {
    return {
      params: {
        lang: post.lang,
        category: post.collection,
        entry: post.id,
      },
      props: post,
    };
  });

  return paths;
}

const locale = Astro.params.lang as Lang;
const t = useTranslations(locale);
const post = Astro.props;
const entryId = post.id.split("/").pop() || "";

const { Content, remarkPluginFrontmatter } = await render(post);
const { title, description, date, tags, topic, cover } = post.data;
---

<EntryLayout {entryId} {title} {description} {date}>
  <main>
    <div class="main-container">
      <article>
        <div
          class="hidden md:flex flex-col lg:flex-row gap-2 text-sm select-none mb-8 text-gray-500"
        >
          <div class="flex gap-2">
            <div class="block">{formatDate(date, locale)} /</div>
            <div class="flex gap-1 items-center">
              <Icon name="clock" size={16} />
              {remarkPluginFrontmatter.minutesRead}
              {
                t({
                  en: "min",
                  tr: "dk",
                })
              } /
            </div>
            <div id="view-counter" class="flex gap-1 items-center ml-4 md:ml-0">
              <Icon name="view" size={16} />
              <span
                data-entry-view-count={entryId}
                class="empty:opacity-0 transition-opacity duration-700 whitespace-nowrap"
              ></span>
            </div>
          </div>
          <div class="flex gap-1 items-center lg:ml-auto">
            {
              tags
                .slice(0, 3)
                .map((tag) => (
                  <div class="text-xs px-2 py-1 rounded-lg bg-gray-200">
                    #{tag}
                  </div>
                ))
            }
          </div>
        </div>
        {!cover && <Icon name={topic} size={64} class="mb-8" colored />}
        <h1 class="mb-5 mt-4 md:mb-6 md:mt-5 text-balance">{title}</h1>
        {
          cover && (
            <div class="mb-8">
              <Image src={cover.src} alt={title} class="w-full h-auto" />
            </div>
          )
        }
        <Content components={components} />
      </article>
    </div>
  </main>
</EntryLayout>

<script define:vars={{ entryId, locale }}>
  async function incrementViewCount() {
    if (
      window.location.hostname === "localhost" ||
      window.location.hostname === "127.0.0.1"
    ) {
      return;
    }

    try {
      await fetch("/api/increment-view", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ entryId, locale }),
      });
    } catch (error) {
      console.error("[ERROR] Failed to increment view count:", error);
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    setTimeout(async () => await incrementViewCount(), 10 * 1000);
  });
</script>
